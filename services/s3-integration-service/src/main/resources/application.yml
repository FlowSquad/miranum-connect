info:
  application:
    name: @project.artifactId@
    version: @project.version@

spring:
  application:
    name: @project.artifactId@
  # Spring JPA
  datasource:
    url: '${S3INTEGRATION_DATASOURCE_URL}'
    username: '${S3INTEGRATION_DATASOURCE_USER}'
    password: '${S3INTEGRATION_DATASOURCE_PASSWORD}'
    driver-class-name: '${S3INTEGRATION_DATASOURCE_DRIVERCLASSNAME}'
  flyway:
    enabled: true
    locations: "classpath:db/migration/{vendor}"
  jpa:
    database-platform: '${S3INTEGRATION_DATABASE_PLATFORM}'
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: validate
    open-in-view: true

  cloud:
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BOOTSTRAP_SERVER:localhost}:${KAFKA_BOOTSTRAP_SERVER_PORT:29092}
          producerProperties:
            value:
              serializer: org.springframework.kafka.support.serializer.JsonSerializer
            key:
              serializer: org.springframework.kafka.support.serializer.JsonSerializer
          consumerProperties:
            auto:
              offset:
                reset: latest
            key:
              deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
            value:
              deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
          configuration:
            security:
              protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
      bindings:
        functionRouter-in-0:
          group: "dwf-s3-service"
          destination: dwf-s3-${DIGIWF_ENV}
        sendMessage-out-0:
          destination: dwf-digiwf-engine-${DIGIWF_ENV}
      default:
        consumer:
          maxAttempts: '1'
      default-binder: kafka
      function:
        routing:
          enabled: 'true'
    function:
      definition: functionRouter;sendMessage;
  kafka:
    consumer:
      properties:
        spring:
          json:
            trusted:
              packages: '*'

io:
  muenchendigital:
    digiwf:
      s3:
        bucketname: ${S3_BUCKETNAME}
        accesskey: ${S3_ACCESSKEY}
        url: ${S3_URL:http://localhost:9000}
        secretkey: ${S3_SECRETKEY}
        client:
          document-storage-url: "${DOCUMENT_STORAGE_HOST:http://localhost}:${DOCUMENT_STORAGE_PORT:8080}"
          securityEnabled: false
        proxyUrl: "${S3_PROXY_HOST}:${S3_PROXY_PORT}"
        cronjob:
          cleanup:
            unused-files: 0 15 10 16 * ?
            expired-files: 0 15 10 15 * ?
        proxyEnabled: 'false'

server:
  port: "${S3_INTEGRATION_SERVER_PORT:8086}"
  error:
    include-exception: false
    include-stacktrace: never
    whitelabel:
      enabled: false

# Config for spring actuator endpoints
management:
  server.port: "${S3_INTEGRATION_SERVER_PORT:8086}"
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: health, info, prometheus
      path-mapping:
        prometheus: metrics
  endpoint:
    health.enabled: true
    info.enabled: true
    prometheus.enabled: true

