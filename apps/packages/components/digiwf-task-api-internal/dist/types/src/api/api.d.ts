/**
 * DigiWF Task Management API
 * API for task management.
 *
 * The version of the OpenAPI document: ${project.version}
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * Page of tasks.
 * @export
 * @interface PageOfTasks
 */
export interface PageOfTasks {
    /**
     *
     * @type {Array<Task>}
     * @memberof PageOfTasks
     */
    'content': Array<Task>;
    /**
     *
     * @type {PageOfTasksPageable}
     * @memberof PageOfTasks
     */
    'pageable': PageOfTasksPageable;
    /**
     * Get amount of total pages.
     * @type {number}
     * @memberof PageOfTasks
     */
    'totalPages': number;
    /**
     * Get amount of total elements.
     * @type {number}
     * @memberof PageOfTasks
     */
    'totalElements': number;
    /**
     * Get amount of elements in this page.
     * @type {number}
     * @memberof PageOfTasks
     */
    'numberOfElements': number;
    /**
     * Size of the page.
     * @type {number}
     * @memberof PageOfTasks
     */
    'size': number;
    /**
     * Index of the page.
     * @type {number}
     * @memberof PageOfTasks
     */
    'page': number;
    /**
     * Flag indicating if this is a last page.
     * @type {boolean}
     * @memberof PageOfTasks
     */
    'last': boolean;
    /**
     * Flag indicating if this is a first page.
     * @type {boolean}
     * @memberof PageOfTasks
     */
    'first': boolean;
    /**
     * Flag indicating if this page is empty.
     * @type {boolean}
     * @memberof PageOfTasks
     */
    'empty': boolean;
}
/**
 * Pageable object.
 * @export
 * @interface PageOfTasksPageable
 */
export interface PageOfTasksPageable {
    /**
     * The index of the page.
     * @type {number}
     * @memberof PageOfTasksPageable
     */
    'pageNumber': number;
    /**
     * The size of the page.
     * @type {number}
     * @memberof PageOfTasksPageable
     */
    'pageSize': number;
    /**
     * Flag if the content is paged or not.
     * @type {boolean}
     * @memberof PageOfTasksPageable
     */
    'paged': boolean;
    /**
     * Flag if the content is paged or not.
     * @type {boolean}
     * @memberof PageOfTasksPageable
     */
    'unpaged': boolean;
    /**
     *
     * @type {PageOfTasksPageableSort}
     * @memberof PageOfTasksPageable
     */
    'sort': PageOfTasksPageableSort;
}
/**
 * Sort of the page.
 * @export
 * @interface PageOfTasksPageableSort
 */
export interface PageOfTasksPageableSort {
    /**
     * Flag if the sort is empty.
     * @type {boolean}
     * @memberof PageOfTasksPageableSort
     */
    'empty'?: boolean;
    /**
     * Flag if the content is sorted or not.
     * @type {boolean}
     * @memberof PageOfTasksPageableSort
     */
    'unsorted'?: boolean;
    /**
     * Flag if the content is sorted or not.
     * @type {boolean}
     * @memberof PageOfTasksPageableSort
     */
    'sorted'?: boolean;
}
/**
 * Represents a user task.
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * Id of the task.
     * @type {string}
     * @memberof Task
     */
    'id': string;
    /**
     * Name of the task.
     * @type {string}
     * @memberof Task
     */
    'name'?: string;
    /**
     * Description of the task.
     * @type {string}
     * @memberof Task
     */
    'description'?: string;
    /**
     * Name of the process the task belongs to.
     * @type {string}
     * @memberof Task
     */
    'processName'?: string;
    /**
     * User id of assignee.
     * @type {string}
     * @memberof Task
     */
    'assignee'?: string;
    /**
     * Follow-up date of the task.
     * @type {string}
     * @memberof Task
     */
    'followUpDate'?: string;
    /**
     * Create date and time of the task.
     * @type {string}
     * @memberof Task
     */
    'createTime'?: string;
    /**
     * Reference to schema id.
     * @type {string}
     * @memberof Task
     */
    'schemaRef': string;
}
/**
 * Task assignment information.
 * @export
 * @interface TaskAssignment
 */
export interface TaskAssignment {
    /**
     * User id of the user to assign.
     * @type {string}
     * @memberof TaskAssignment
     */
    'assignee': string;
}
/**
 * Combined schema for a user task.
 * @export
 * @interface TaskCombinedSchema
 */
export interface TaskCombinedSchema {
    /**
     * Id of the schema.
     * @type {string}
     * @memberof TaskCombinedSchema
     */
    'schemaId': string;
    /**
     * JSON combining UI and Data format schema.
     * @type {string}
     * @memberof TaskCombinedSchema
     */
    'schemaJson': string;
}
/**
 * The task deferral information.
 * @export
 * @interface TaskDeferral
 */
export interface TaskDeferral {
    /**
     * Date until the task is deferred.
     * @type {string}
     * @memberof TaskDeferral
     */
    'followUpDate': string;
}
/**
 * Represents a user task.
 * @export
 * @interface TaskWithDetails
 */
export interface TaskWithDetails {
    /**
     * Id of the task.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'id': string;
    /**
     * Name of the task.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'name'?: string;
    /**
     * Description of the task.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'description'?: string;
    /**
     * Name of the process the task belongs to.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'processName'?: string;
    /**
     * Id of the process instance.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'processInstanceId'?: string;
    /**
     * User id of assignee.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'assignee'?: string;
    /**
     * Follow-up date of the task.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'followUpDate'?: string;
    /**
     * Create date and time of the task.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'createTime'?: string;
    /**
     * Reference to schema id.
     * @type {string}
     * @memberof TaskWithDetails
     */
    'schemaRef': string;
    /**
     * Variables of the task.
     * @type {{ [key: string]: object; }}
     * @memberof TaskWithDetails
     */
    'variables': {
        [key: string]: object;
    };
}
/**
 * Represents a user task with embedded combined schema.
 * @export
 * @interface TaskWithSchema
 */
export interface TaskWithSchema {
    /**
     * Id of the task.
     * @type {string}
     * @memberof TaskWithSchema
     */
    'id': string;
    /**
     * Name of the task.
     * @type {string}
     * @memberof TaskWithSchema
     */
    'name'?: string;
    /**
     * Description of the task.
     * @type {string}
     * @memberof TaskWithSchema
     */
    'description'?: string;
    /**
     * Name of the process the task belongs to.
     * @type {string}
     * @memberof TaskWithSchema
     */
    'processName'?: string;
    /**
     * Id of the process instance.
     * @type {string}
     * @memberof TaskWithSchema
     */
    'processInstanceId'?: string;
    /**
     * User id of assignee.
     * @type {string}
     * @memberof TaskWithSchema
     */
    'assignee'?: string;
    /**
     * Follow-up date of the task.
     * @type {string}
     * @memberof TaskWithSchema
     */
    'followUpDate'?: string;
    /**
     * Create date and time of the task.
     * @type {string}
     * @memberof TaskWithSchema
     */
    'createTime'?: string;
    /**
     * Schema of the task.
     * @type {{ [key: string]: object; }}
     * @memberof TaskWithSchema
     */
    'schema': {
        [key: string]: object;
    };
    /**
     * Variables of the task.
     * @type {{ [key: string]: object; }}
     * @memberof TaskWithSchema
     */
    'variables': {
        [key: string]: object;
    };
}
/**
 * Profile of the user.
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * Unique user id.
     * @type {string}
     * @memberof UserProfile
     */
    'userId': string;
    /**
     * First name.
     * @type {string}
     * @memberof UserProfile
     */
    'firstName': string;
    /**
     * Last name.
     * @type {string}
     * @memberof UserProfile
     */
    'lastName': string;
    /**
     * Primary organizational unit.
     * @type {string}
     * @memberof UserProfile
     */
    'primaryOrgUnit': string;
}
/**
 * TaskApi - axios parameter creator
 * @export
 */
export declare const TaskApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Changes the assignee of the task.
     * @param {string} taskId Task id.
     * @param {TaskAssignment} taskAssignment Task variables to save.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignTask: (taskId: string, taskAssignment: TaskAssignment, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Completes task specified by id.
     * @param {string} taskId Task id.
     * @param {{ [key: string]: object; }} requestBody Task variables to use during completion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTask: (taskId: string, requestBody: {
        [key: string]: object;
    }, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Defer the task to a follow-up date.
     * @param {string} taskId Task id.
     * @param {TaskDeferral} taskDeferral Task follow-up date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deferTask: (taskId: string, taskDeferral: TaskDeferral, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a schema for a task by schema id.
     * @summary Returns a schema for a task by schema id.
     * @param {string} schemaId Schema id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema: (schemaId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a task by its id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskByTaskId: (taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a schema for a task by task id.
     * @summary Returns a schema for a task by task id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskSchema: (taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a task with schema by its id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskWithSchemaByTaskId: (taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Saves the variables for the task specified by id.
     * @param {string} taskId Task id.
     * @param {{ [key: string]: object; }} requestBody Task variables to save.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveTaskVariables: (taskId: string, requestBody: {
        [key: string]: object;
    }, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Resets the assignment of the task.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unassignTask: (taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Undefer the task resetting the follow-up date.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undeferTask: (taskId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TaskApi - functional programming interface
 * @export
 */
export declare const TaskApiFp: (configuration?: Configuration) => {
    /**
     * Changes the assignee of the task.
     * @param {string} taskId Task id.
     * @param {TaskAssignment} taskAssignment Task variables to save.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignTask(taskId: string, taskAssignment: TaskAssignment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Completes task specified by id.
     * @param {string} taskId Task id.
     * @param {{ [key: string]: object; }} requestBody Task variables to use during completion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTask(taskId: string, requestBody: {
        [key: string]: object;
    }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Defer the task to a follow-up date.
     * @param {string} taskId Task id.
     * @param {TaskDeferral} taskDeferral Task follow-up date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deferTask(taskId: string, taskDeferral: TaskDeferral, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a schema for a task by schema id.
     * @summary Returns a schema for a task by schema id.
     * @param {string} schemaId Schema id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(schemaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskCombinedSchema>>;
    /**
     * Returns a task by its id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskByTaskId(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskWithDetails>>;
    /**
     * Returns a schema for a task by task id.
     * @summary Returns a schema for a task by task id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskSchema(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskCombinedSchema>>;
    /**
     * Returns a task with schema by its id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskWithSchemaByTaskId(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskWithSchema>>;
    /**
     * Saves the variables for the task specified by id.
     * @param {string} taskId Task id.
     * @param {{ [key: string]: object; }} requestBody Task variables to save.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveTaskVariables(taskId: string, requestBody: {
        [key: string]: object;
    }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Resets the assignment of the task.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unassignTask(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Undefer the task resetting the follow-up date.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undeferTask(taskId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * TaskApi - factory interface
 * @export
 */
export declare const TaskApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Changes the assignee of the task.
     * @param {string} taskId Task id.
     * @param {TaskAssignment} taskAssignment Task variables to save.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignTask(taskId: string, taskAssignment: TaskAssignment, options?: any): AxiosPromise<void>;
    /**
     * Completes task specified by id.
     * @param {string} taskId Task id.
     * @param {{ [key: string]: object; }} requestBody Task variables to use during completion.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTask(taskId: string, requestBody: {
        [key: string]: object;
    }, options?: any): AxiosPromise<void>;
    /**
     * Defer the task to a follow-up date.
     * @param {string} taskId Task id.
     * @param {TaskDeferral} taskDeferral Task follow-up date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deferTask(taskId: string, taskDeferral: TaskDeferral, options?: any): AxiosPromise<void>;
    /**
     * Returns a schema for a task by schema id.
     * @summary Returns a schema for a task by schema id.
     * @param {string} schemaId Schema id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSchema(schemaId: string, options?: any): AxiosPromise<TaskCombinedSchema>;
    /**
     * Returns a task by its id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskByTaskId(taskId: string, options?: any): AxiosPromise<TaskWithDetails>;
    /**
     * Returns a schema for a task by task id.
     * @summary Returns a schema for a task by task id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskSchema(taskId: string, options?: any): AxiosPromise<TaskCombinedSchema>;
    /**
     * Returns a task with schema by its id.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskWithSchemaByTaskId(taskId: string, options?: any): AxiosPromise<TaskWithSchema>;
    /**
     * Saves the variables for the task specified by id.
     * @param {string} taskId Task id.
     * @param {{ [key: string]: object; }} requestBody Task variables to save.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    saveTaskVariables(taskId: string, requestBody: {
        [key: string]: object;
    }, options?: any): AxiosPromise<void>;
    /**
     * Resets the assignment of the task.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unassignTask(taskId: string, options?: any): AxiosPromise<void>;
    /**
     * Undefer the task resetting the follow-up date.
     * @param {string} taskId Task id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undeferTask(taskId: string, options?: any): AxiosPromise<void>;
};
/**
 * Request parameters for assignTask operation in TaskApi.
 * @export
 * @interface TaskApiAssignTaskRequest
 */
export interface TaskApiAssignTaskRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiAssignTask
     */
    readonly taskId: string;
    /**
     * Task variables to save.
     * @type {TaskAssignment}
     * @memberof TaskApiAssignTask
     */
    readonly taskAssignment: TaskAssignment;
}
/**
 * Request parameters for completeTask operation in TaskApi.
 * @export
 * @interface TaskApiCompleteTaskRequest
 */
export interface TaskApiCompleteTaskRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiCompleteTask
     */
    readonly taskId: string;
    /**
     * Task variables to use during completion.
     * @type {{ [key: string]: object; }}
     * @memberof TaskApiCompleteTask
     */
    readonly requestBody: {
        [key: string]: object;
    };
}
/**
 * Request parameters for deferTask operation in TaskApi.
 * @export
 * @interface TaskApiDeferTaskRequest
 */
export interface TaskApiDeferTaskRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiDeferTask
     */
    readonly taskId: string;
    /**
     * Task follow-up date.
     * @type {TaskDeferral}
     * @memberof TaskApiDeferTask
     */
    readonly taskDeferral: TaskDeferral;
}
/**
 * Request parameters for getSchema operation in TaskApi.
 * @export
 * @interface TaskApiGetSchemaRequest
 */
export interface TaskApiGetSchemaRequest {
    /**
     * Schema id.
     * @type {string}
     * @memberof TaskApiGetSchema
     */
    readonly schemaId: string;
}
/**
 * Request parameters for getTaskByTaskId operation in TaskApi.
 * @export
 * @interface TaskApiGetTaskByTaskIdRequest
 */
export interface TaskApiGetTaskByTaskIdRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiGetTaskByTaskId
     */
    readonly taskId: string;
}
/**
 * Request parameters for getTaskSchema operation in TaskApi.
 * @export
 * @interface TaskApiGetTaskSchemaRequest
 */
export interface TaskApiGetTaskSchemaRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiGetTaskSchema
     */
    readonly taskId: string;
}
/**
 * Request parameters for getTaskWithSchemaByTaskId operation in TaskApi.
 * @export
 * @interface TaskApiGetTaskWithSchemaByTaskIdRequest
 */
export interface TaskApiGetTaskWithSchemaByTaskIdRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiGetTaskWithSchemaByTaskId
     */
    readonly taskId: string;
}
/**
 * Request parameters for saveTaskVariables operation in TaskApi.
 * @export
 * @interface TaskApiSaveTaskVariablesRequest
 */
export interface TaskApiSaveTaskVariablesRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiSaveTaskVariables
     */
    readonly taskId: string;
    /**
     * Task variables to save.
     * @type {{ [key: string]: object; }}
     * @memberof TaskApiSaveTaskVariables
     */
    readonly requestBody: {
        [key: string]: object;
    };
}
/**
 * Request parameters for unassignTask operation in TaskApi.
 * @export
 * @interface TaskApiUnassignTaskRequest
 */
export interface TaskApiUnassignTaskRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiUnassignTask
     */
    readonly taskId: string;
}
/**
 * Request parameters for undeferTask operation in TaskApi.
 * @export
 * @interface TaskApiUndeferTaskRequest
 */
export interface TaskApiUndeferTaskRequest {
    /**
     * Task id.
     * @type {string}
     * @memberof TaskApiUndeferTask
     */
    readonly taskId: string;
}
/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export declare class TaskApi extends BaseAPI {
    /**
     * Changes the assignee of the task.
     * @param {TaskApiAssignTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    assignTask(requestParameters: TaskApiAssignTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Completes task specified by id.
     * @param {TaskApiCompleteTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    completeTask(requestParameters: TaskApiCompleteTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Defer the task to a follow-up date.
     * @param {TaskApiDeferTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    deferTask(requestParameters: TaskApiDeferTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a schema for a task by schema id.
     * @summary Returns a schema for a task by schema id.
     * @param {TaskApiGetSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    getSchema(requestParameters: TaskApiGetSchemaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskCombinedSchema, any>>;
    /**
     * Returns a task by its id.
     * @param {TaskApiGetTaskByTaskIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    getTaskByTaskId(requestParameters: TaskApiGetTaskByTaskIdRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskWithDetails, any>>;
    /**
     * Returns a schema for a task by task id.
     * @summary Returns a schema for a task by task id.
     * @param {TaskApiGetTaskSchemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    getTaskSchema(requestParameters: TaskApiGetTaskSchemaRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskCombinedSchema, any>>;
    /**
     * Returns a task with schema by its id.
     * @param {TaskApiGetTaskWithSchemaByTaskIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    getTaskWithSchemaByTaskId(requestParameters: TaskApiGetTaskWithSchemaByTaskIdRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TaskWithSchema, any>>;
    /**
     * Saves the variables for the task specified by id.
     * @param {TaskApiSaveTaskVariablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    saveTaskVariables(requestParameters: TaskApiSaveTaskVariablesRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Resets the assignment of the task.
     * @param {TaskApiUnassignTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    unassignTask(requestParameters: TaskApiUnassignTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Undefer the task resetting the follow-up date.
     * @param {TaskApiUndeferTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    undeferTask(requestParameters: TaskApiUndeferTaskRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TasksApi - axios parameter creator
 * @export
 */
export declare const TasksApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a list of tasks for the groups the current user is in (candidate groups) including already assigned.
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssignedGroupTasks: (page?: number, size?: number, query?: string, sort?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of tasks assigned to current user.
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [followUp] An optional flag to include tasks with follow-up date set to a day before today.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserTasks: (page?: number, size?: number, query?: string, followUp?: string, sort?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of unassigned tasks for the groups the current user is in (candidate groups).
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnassignedGroupTasks: (page?: number, size?: number, query?: string, sort?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TasksApi - functional programming interface
 * @export
 */
export declare const TasksApiFp: (configuration?: Configuration) => {
    /**
     * Returns a list of tasks for the groups the current user is in (candidate groups) including already assigned.
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssignedGroupTasks(page?: number, size?: number, query?: string, sort?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfTasks>>;
    /**
     * Returns a list of tasks assigned to current user.
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [followUp] An optional flag to include tasks with follow-up date set to a day before today.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserTasks(page?: number, size?: number, query?: string, followUp?: string, sort?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfTasks>>;
    /**
     * Returns a list of unassigned tasks for the groups the current user is in (candidate groups).
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnassignedGroupTasks(page?: number, size?: number, query?: string, sort?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOfTasks>>;
};
/**
 * TasksApi - factory interface
 * @export
 */
export declare const TasksApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a list of tasks for the groups the current user is in (candidate groups) including already assigned.
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssignedGroupTasks(page?: number, size?: number, query?: string, sort?: string, options?: any): AxiosPromise<PageOfTasks>;
    /**
     * Returns a list of tasks assigned to current user.
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [followUp] An optional flag to include tasks with follow-up date set to a day before today.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserTasks(page?: number, size?: number, query?: string, followUp?: string, sort?: string, options?: any): AxiosPromise<PageOfTasks>;
    /**
     * Returns a list of unassigned tasks for the groups the current user is in (candidate groups).
     * @param {number} [page] Current page used index for paging operations started from zero.
     * @param {number} [size] Current page size used for paging operations started from 1.
     * @param {string} [query] A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @param {string} [sort] A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnassignedGroupTasks(page?: number, size?: number, query?: string, sort?: string, options?: any): AxiosPromise<PageOfTasks>;
};
/**
 * Request parameters for getAssignedGroupTasks operation in TasksApi.
 * @export
 * @interface TasksApiGetAssignedGroupTasksRequest
 */
export interface TasksApiGetAssignedGroupTasksRequest {
    /**
     * Current page used index for paging operations started from zero.
     * @type {number}
     * @memberof TasksApiGetAssignedGroupTasks
     */
    readonly page?: number;
    /**
     * Current page size used for paging operations started from 1.
     * @type {number}
     * @memberof TasksApiGetAssignedGroupTasks
     */
    readonly size?: number;
    /**
     * A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @type {string}
     * @memberof TasksApiGetAssignedGroupTasks
     */
    readonly query?: string;
    /**
     * A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @type {string}
     * @memberof TasksApiGetAssignedGroupTasks
     */
    readonly sort?: string;
}
/**
 * Request parameters for getCurrentUserTasks operation in TasksApi.
 * @export
 * @interface TasksApiGetCurrentUserTasksRequest
 */
export interface TasksApiGetCurrentUserTasksRequest {
    /**
     * Current page used index for paging operations started from zero.
     * @type {number}
     * @memberof TasksApiGetCurrentUserTasks
     */
    readonly page?: number;
    /**
     * Current page size used for paging operations started from 1.
     * @type {number}
     * @memberof TasksApiGetCurrentUserTasks
     */
    readonly size?: number;
    /**
     * A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @type {string}
     * @memberof TasksApiGetCurrentUserTasks
     */
    readonly query?: string;
    /**
     * An optional flag to include tasks with follow-up date set to a day before today.
     * @type {string}
     * @memberof TasksApiGetCurrentUserTasks
     */
    readonly followUp?: string;
    /**
     * A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @type {string}
     * @memberof TasksApiGetCurrentUserTasks
     */
    readonly sort?: string;
}
/**
 * Request parameters for getUnassignedGroupTasks operation in TasksApi.
 * @export
 * @interface TasksApiGetUnassignedGroupTasksRequest
 */
export interface TasksApiGetUnassignedGroupTasksRequest {
    /**
     * Current page used index for paging operations started from zero.
     * @type {number}
     * @memberof TasksApiGetUnassignedGroupTasks
     */
    readonly page?: number;
    /**
     * Current page size used for paging operations started from 1.
     * @type {number}
     * @memberof TasksApiGetUnassignedGroupTasks
     */
    readonly size?: number;
    /**
     * A query string used during search, format is &lt;field&gt;&lt;op&gt;&lt;value&gt;.
     * @type {string}
     * @memberof TasksApiGetUnassignedGroupTasks
     */
    readonly query?: string;
    /**
     * A sort parameter, &lt;direction&gt;&lt;field&gt; (direction is represented by + for asc or - for desc), asc is default.
     * @type {string}
     * @memberof TasksApiGetUnassignedGroupTasks
     */
    readonly sort?: string;
}
/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export declare class TasksApi extends BaseAPI {
    /**
     * Returns a list of tasks for the groups the current user is in (candidate groups) including already assigned.
     * @param {TasksApiGetAssignedGroupTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    getAssignedGroupTasks(requestParameters?: TasksApiGetAssignedGroupTasksRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PageOfTasks, any>>;
    /**
     * Returns a list of tasks assigned to current user.
     * @param {TasksApiGetCurrentUserTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    getCurrentUserTasks(requestParameters?: TasksApiGetCurrentUserTasksRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PageOfTasks, any>>;
    /**
     * Returns a list of unassigned tasks for the groups the current user is in (candidate groups).
     * @param {TasksApiGetUnassignedGroupTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    getUnassignedGroupTasks(requestParameters?: TasksApiGetUnassignedGroupTasksRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PageOfTasks, any>>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Resolves a user by id.
     * @param {string} userId User id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveUser: (userId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * Resolves a user by id.
     * @param {string} userId User id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveUser(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile>>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Resolves a user by id.
     * @param {string} userId User id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveUser(userId: string, options?: any): AxiosPromise<UserProfile>;
};
/**
 * Request parameters for resolveUser operation in UserApi.
 * @export
 * @interface UserApiResolveUserRequest
 */
export interface UserApiResolveUserRequest {
    /**
     * User id.
     * @type {string}
     * @memberof UserApiResolveUser
     */
    readonly userId: string;
}
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * Resolves a user by id.
     * @param {UserApiResolveUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    resolveUser(requestParameters: UserApiResolveUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserProfile, any>>;
}
