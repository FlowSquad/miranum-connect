/*
 * Submission API für Antragsverfahren und Berichtspflichten
 * Die FIT-Connect Submission API ermöglicht das Einreichen von Anträgen und Berichten aus vorgelagerten Systemen (z. B. Onlineantragsdiensten, Fachportalen oder Berichtssystemen) an die Systeme der Verwaltung zur elektronischen Verfahrensbearbeitung (z. B. Fachverfahren, Dokumentenmanagementsysteme oder Prozessplattformen). 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.miraum.fitconnect.integration.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Datenstruktur für den Abschluss einer Einreichung.
 */
@ApiModel(description = "Datenstruktur für den Abschluss einer Einreichung.")
@JsonPropertyOrder({
  SubmitSubmission.JSON_PROPERTY_ENCRYPTED_METADATA,
  SubmitSubmission.JSON_PROPERTY_ENCRYPTED_DATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubmitSubmission {
  public static final String JSON_PROPERTY_ENCRYPTED_METADATA = "encryptedMetadata";
  private String encryptedMetadata;

  public static final String JSON_PROPERTY_ENCRYPTED_DATA = "encryptedData";
  private String encryptedData;

  public SubmitSubmission() {
  }

  public SubmitSubmission encryptedMetadata(String encryptedMetadata) {
    
    this.encryptedMetadata = encryptedMetadata;
    return this;
  }

   /**
   * Verschlüsselte Metadaten im Format JSON Web Encryption (JWE) laut RFC7516
   * @return encryptedMetadata
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Verschlüsselte Metadaten im Format JSON Web Encryption (JWE) laut RFC7516")
  @JsonProperty(JSON_PROPERTY_ENCRYPTED_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEncryptedMetadata() {
    return encryptedMetadata;
  }


  @JsonProperty(JSON_PROPERTY_ENCRYPTED_METADATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEncryptedMetadata(String encryptedMetadata) {
    this.encryptedMetadata = encryptedMetadata;
  }


  public SubmitSubmission encryptedData(String encryptedData) {
    
    this.encryptedData = encryptedData;
    return this;
  }

   /**
   * Verschlüsselte Einreichungsdaten im Format JSON Web Encryption (JWE) laut RFC7516
   * @return encryptedData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Verschlüsselte Einreichungsdaten im Format JSON Web Encryption (JWE) laut RFC7516")
  @JsonProperty(JSON_PROPERTY_ENCRYPTED_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncryptedData() {
    return encryptedData;
  }


  @JsonProperty(JSON_PROPERTY_ENCRYPTED_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncryptedData(String encryptedData) {
    this.encryptedData = encryptedData;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmitSubmission submitSubmission = (SubmitSubmission) o;
    return Objects.equals(this.encryptedMetadata, submitSubmission.encryptedMetadata) &&
        Objects.equals(this.encryptedData, submitSubmission.encryptedData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptedMetadata, encryptedData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmitSubmission {\n");
    sb.append("    encryptedMetadata: ").append(toIndentedString(encryptedMetadata)).append("\n");
    sb.append("    encryptedData: ").append(toIndentedString(encryptedData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

