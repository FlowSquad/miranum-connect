/*
 * Submission API für Antragsverfahren und Berichtspflichten
 * Die FIT-Connect Submission API ermöglicht das Einreichen von Anträgen und Berichten aus vorgelagerten Systemen (z. B. Onlineantragsdiensten, Fachportalen oder Berichtssystemen) an die Systeme der Verwaltung zur elektronischen Verfahrensbearbeitung (z. B. Fachverfahren, Dokumentenmanagementsysteme oder Prozessplattformen). 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.miraum.fitconnect.integration.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.miragon.miraum.fitconnect.integration.gen.model.ReplyChannelEMail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Hier kann eine empfangende Stelle angeben, welche elektronischen Rückkanäle es für Einreichungen an diesen Zustellpunkt unterstützt. Sofern keine Channels angegeben werden, kann ein sendendes System  davon ausgehen, dass die Behörde nur über den Papierweg im Rückkanal kommuniziert.
 * @deprecated
 */
@Deprecated
@ApiModel(description = "Hier kann eine empfangende Stelle angeben, welche elektronischen Rückkanäle es für Einreichungen an diesen Zustellpunkt unterstützt. Sofern keine Channels angegeben werden, kann ein sendendes System  davon ausgehen, dass die Behörde nur über den Papierweg im Rückkanal kommuniziert.")
@JsonPropertyOrder({
  ReplyChannel.JSON_PROPERTY_DE_MAIL,
  ReplyChannel.JSON_PROPERTY_ELSTER,
  ReplyChannel.JSON_PROPERTY_E_MAIL,
  ReplyChannel.JSON_PROPERTY_FINK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ReplyChannel {
  public static final String JSON_PROPERTY_DE_MAIL = "deMail";
  private Object deMail;

  public static final String JSON_PROPERTY_ELSTER = "elster";
  private Object elster;

  public static final String JSON_PROPERTY_E_MAIL = "eMail";
  private ReplyChannelEMail eMail;

  public static final String JSON_PROPERTY_FINK = "fink";
  private Object fink;

  public ReplyChannel() {
  }

  public ReplyChannel deMail(Object deMail) {
    
    this.deMail = deMail;
    return this;
  }

   /**
   * Hiermit kann den sendenden Systemen signalisiert werden, dass die empfangende Stelle für Einreichungen an diesen Zustellpunkt eine Rückkanalkommunikation per DE-Mail unterstützt.
   * @return deMail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hiermit kann den sendenden Systemen signalisiert werden, dass die empfangende Stelle für Einreichungen an diesen Zustellpunkt eine Rückkanalkommunikation per DE-Mail unterstützt.")
  @JsonProperty(JSON_PROPERTY_DE_MAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getDeMail() {
    return deMail;
  }


  @JsonProperty(JSON_PROPERTY_DE_MAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeMail(Object deMail) {
    this.deMail = deMail;
  }


  public ReplyChannel elster(Object elster) {
    
    this.elster = elster;
    return this;
  }

   /**
   * Hiermit kann den sendenden Systemen signalisiert werden, dass die empfangende Stelle für Einreichungen an diesen Zustellpunkt eine Rückkanalkommunikation per Elster-Transfer unterstützt.
   * @return elster
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hiermit kann den sendenden Systemen signalisiert werden, dass die empfangende Stelle für Einreichungen an diesen Zustellpunkt eine Rückkanalkommunikation per Elster-Transfer unterstützt.")
  @JsonProperty(JSON_PROPERTY_ELSTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getElster() {
    return elster;
  }


  @JsonProperty(JSON_PROPERTY_ELSTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElster(Object elster) {
    this.elster = elster;
  }


  public ReplyChannel eMail(ReplyChannelEMail eMail) {
    
    this.eMail = eMail;
    return this;
  }

   /**
   * Get eMail
   * @return eMail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_E_MAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ReplyChannelEMail geteMail() {
    return eMail;
  }


  @JsonProperty(JSON_PROPERTY_E_MAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void seteMail(ReplyChannelEMail eMail) {
    this.eMail = eMail;
  }


  public ReplyChannel fink(Object fink) {
    
    this.fink = fink;
    return this;
  }

   /**
   * Hiermit kann den sendenden Systemen signalisiert werden, dass die empfangende Stelle für Einreichungen an diesen Zustellpunkt eine Rückkanalkommunikation an die interoperablen Postfächer der FINK Föderation unterstützt.
   * @return fink
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hiermit kann den sendenden Systemen signalisiert werden, dass die empfangende Stelle für Einreichungen an diesen Zustellpunkt eine Rückkanalkommunikation an die interoperablen Postfächer der FINK Föderation unterstützt.")
  @JsonProperty(JSON_PROPERTY_FINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getFink() {
    return fink;
  }


  @JsonProperty(JSON_PROPERTY_FINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFink(Object fink) {
    this.fink = fink;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplyChannel replyChannel = (ReplyChannel) o;
    return Objects.equals(this.deMail, replyChannel.deMail) &&
        Objects.equals(this.elster, replyChannel.elster) &&
        Objects.equals(this.eMail, replyChannel.eMail) &&
        Objects.equals(this.fink, replyChannel.fink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deMail, elster, eMail, fink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplyChannel {\n");
    sb.append("    deMail: ").append(toIndentedString(deMail)).append("\n");
    sb.append("    elster: ").append(toIndentedString(elster)).append("\n");
    sb.append("    eMail: ").append(toIndentedString(eMail)).append("\n");
    sb.append("    fink: ").append(toIndentedString(fink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

