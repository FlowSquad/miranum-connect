/*
 * Submission API für Antragsverfahren und Berichtspflichten
 * Die FIT-Connect Submission API ermöglicht das Einreichen von Anträgen und Berichten aus vorgelagerten Systemen (z. B. Onlineantragsdiensten, Fachportalen oder Berichtssystemen) an die Systeme der Verwaltung zur elektronischen Verfahrensbearbeitung (z. B. Fachverfahren, Dokumentenmanagementsysteme oder Prozessplattformen). 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.miraum.fitconnect.integration.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Dieses Objekt enthält den [Event Log einer Einreichung](https://docs.fitko.de/fit-connect/docs/getting-started/event-log). Beispiele für Events im Event Log sind das Akzeptieren oder das Ablehnen einer Einreichung. Der Aufbau und die Bedeutung einzelner Events ist [in der Dokumentation zum Abruf von Events beschrieben](https://docs.fitko.de/fit-connect/docs/getting-started/sending/query-status). Neue Events werden am Ende des Event Log hinzugefügt (das letzte Element im Array ist das neuste). 
 */
@ApiModel(description = "Dieses Objekt enthält den [Event Log einer Einreichung](https://docs.fitko.de/fit-connect/docs/getting-started/event-log). Beispiele für Events im Event Log sind das Akzeptieren oder das Ablehnen einer Einreichung. Der Aufbau und die Bedeutung einzelner Events ist [in der Dokumentation zum Abruf von Events beschrieben](https://docs.fitko.de/fit-connect/docs/getting-started/sending/query-status). Neue Events werden am Ende des Event Log hinzugefügt (das letzte Element im Array ist das neuste). ")
@JsonPropertyOrder({
  EventLog.JSON_PROPERTY_COUNT,
  EventLog.JSON_PROPERTY_OFFSET,
  EventLog.JSON_PROPERTY_TOTAL_COUNT,
  EventLog.JSON_PROPERTY_EVENT_LOG
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventLog {
  public static final String JSON_PROPERTY_COUNT = "count";
  private Integer count;

  public static final String JSON_PROPERTY_OFFSET = "offset";
  private Integer offset;

  public static final String JSON_PROPERTY_TOTAL_COUNT = "totalCount";
  private Integer totalCount;

  public static final String JSON_PROPERTY_EVENT_LOG = "eventLog";
  private List<String> eventLog = new ArrayList<>();

  public EventLog() {
  }

  public EventLog count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Anzahl zurückgegebener Events
   * minimum: 0
   * maximum: 500
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Anzahl zurückgegebener Events")
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(Integer count) {
    this.count = count;
  }


  public EventLog offset(Integer offset) {
    
    this.offset = offset;
    return this;
  }

   /**
   * Startposition der Teilmenge zurückgegebener Events aus der Gesamtergebnismenge.
   * minimum: 0
   * @return offset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Startposition der Teilmenge zurückgegebener Events aus der Gesamtergebnismenge.")
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public EventLog totalCount(Integer totalCount) {
    
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Gesamtanzahl der Events
   * minimum: 0
   * @return totalCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gesamtanzahl der Events")
  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalCount() {
    return totalCount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }


  public EventLog eventLog(List<String> eventLog) {
    
    this.eventLog = eventLog;
    return this;
  }

  public EventLog addEventLogItem(String eventLogItem) {
    this.eventLog.add(eventLogItem);
    return this;
  }

   /**
   * Get eventLog
   * @return eventLog
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_EVENT_LOG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getEventLog() {
    return eventLog;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_LOG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventLog(List<String> eventLog) {
    this.eventLog = eventLog;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventLog eventLog = (EventLog) o;
    return Objects.equals(this.count, eventLog.count) &&
        Objects.equals(this.offset, eventLog.offset) &&
        Objects.equals(this.totalCount, eventLog.totalCount) &&
        Objects.equals(this.eventLog, eventLog.eventLog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, offset, totalCount, eventLog);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventLog {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    eventLog: ").append(toIndentedString(eventLog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

