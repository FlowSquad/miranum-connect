/*
 * Submission API für Antragsverfahren und Berichtspflichten
 * Die FIT-Connect Submission API ermöglicht das Einreichen von Anträgen und Berichten aus vorgelagerten Systemen (z. B. Onlineantragsdiensten, Fachportalen oder Berichtssystemen) an die Systeme der Verwaltung zur elektronischen Verfahrensbearbeitung (z. B. Fachverfahren, Dokumentenmanagementsysteme oder Prozessplattformen). 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.miraum.fitconnect.integration.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Version
 */
@JsonPropertyOrder({
  Version.JSON_PROPERTY_MAJOR,
  Version.JSON_PROPERTY_MINOR,
  Version.JSON_PROPERTY_PATCH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Version {
  public static final String JSON_PROPERTY_MAJOR = "major";
  private Integer major;

  public static final String JSON_PROPERTY_MINOR = "minor";
  private Integer minor;

  public static final String JSON_PROPERTY_PATCH = "patch";
  private Integer patch;

  public Version() {
  }

  public Version major(Integer major) {
    
    this.major = major;
    return this;
  }

   /**
   * Get major
   * @return major
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MAJOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMajor() {
    return major;
  }


  @JsonProperty(JSON_PROPERTY_MAJOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMajor(Integer major) {
    this.major = major;
  }


  public Version minor(Integer minor) {
    
    this.minor = minor;
    return this;
  }

   /**
   * Get minor
   * @return minor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_MINOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinor() {
    return minor;
  }


  @JsonProperty(JSON_PROPERTY_MINOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinor(Integer minor) {
    this.minor = minor;
  }


  public Version patch(Integer patch) {
    
    this.patch = patch;
    return this;
  }

   /**
   * Get patch
   * @return patch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PATCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPatch() {
    return patch;
  }


  @JsonProperty(JSON_PROPERTY_PATCH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPatch(Integer patch) {
    this.patch = patch;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Version version = (Version) o;
    return Objects.equals(this.major, version.major) &&
        Objects.equals(this.minor, version.minor) &&
        Objects.equals(this.patch, version.patch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(major, minor, patch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Version {\n");
    sb.append("    major: ").append(toIndentedString(major)).append("\n");
    sb.append("    minor: ").append(toIndentedString(minor)).append("\n");
    sb.append("    patch: ").append(toIndentedString(patch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

