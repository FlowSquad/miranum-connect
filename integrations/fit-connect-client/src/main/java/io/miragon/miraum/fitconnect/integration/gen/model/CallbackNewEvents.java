/*
 * Submission API für Antragsverfahren und Berichtspflichten
 * Die FIT-Connect Submission API ermöglicht das Einreichen von Anträgen und Berichten aus vorgelagerten Systemen (z. B. Onlineantragsdiensten, Fachportalen oder Berichtssystemen) an die Systeme der Verwaltung zur elektronischen Verfahrensbearbeitung (z. B. Fachverfahren, Dokumentenmanagementsysteme oder Prozessplattformen). 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.miraum.fitconnect.integration.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.miragon.miraum.fitconnect.integration.gen.model.SubmissionForNewEvents;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Callback, der über neue Events im Event Log informiert.
 */
@ApiModel(description = "Callback, der über neue Events im Event Log informiert.")
@JsonPropertyOrder({
  CallbackNewEvents.JSON_PROPERTY_TYPE,
  CallbackNewEvents.JSON_PROPERTY_SUBMISSION_IDS,
  CallbackNewEvents.JSON_PROPERTY_SUBMISSIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CallbackNewEvents {
  /**
   * Es liegen neue Events im Event Log vor
   */
  public enum TypeEnum {
    HTTPS_SCHEMA_FITKO_DE_FIT_CONNECT_SUBMISSION_API_CALLBACKS_NEW_EVENTS("https://schema.fitko.de/fit-connect/submission-api/callbacks/new-events");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_SUBMISSION_IDS = "submissionIds";
  private List<UUID> submissionIds = null;

  public static final String JSON_PROPERTY_SUBMISSIONS = "submissions";
  private List<SubmissionForNewEvents> submissions = null;

  public CallbackNewEvents() {
  }

  public CallbackNewEvents type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Es liegen neue Events im Event Log vor
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Es liegen neue Events im Event Log vor")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CallbackNewEvents submissionIds(List<UUID> submissionIds) {
    
    this.submissionIds = submissionIds;
    return this;
  }

  public CallbackNewEvents addSubmissionIdsItem(UUID submissionIdsItem) {
    if (this.submissionIds == null) {
      this.submissionIds = new ArrayList<>();
    }
    this.submissionIds.add(submissionIdsItem);
    return this;
  }

   /**
   * (DEPRECATED) Liste der &#x60;submissionId&#x60;s, für die neue Events im Event Log bereitstehen
   * @return submissionIds
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(DEPRECATED) Liste der `submissionId`s, für die neue Events im Event Log bereitstehen")
  @JsonProperty(JSON_PROPERTY_SUBMISSION_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UUID> getSubmissionIds() {
    return submissionIds;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSION_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmissionIds(List<UUID> submissionIds) {
    this.submissionIds = submissionIds;
  }


  public CallbackNewEvents submissions(List<SubmissionForNewEvents> submissions) {
    
    this.submissions = submissions;
    return this;
  }

  public CallbackNewEvents addSubmissionsItem(SubmissionForNewEvents submissionsItem) {
    if (this.submissions == null) {
      this.submissions = new ArrayList<>();
    }
    this.submissions.add(submissionsItem);
    return this;
  }

   /**
   * Liste von Einreichungen, für die neue Events im Event Log bereitstehen.
   * @return submissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Liste von Einreichungen, für die neue Events im Event Log bereitstehen.")
  @JsonProperty(JSON_PROPERTY_SUBMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SubmissionForNewEvents> getSubmissions() {
    return submissions;
  }


  @JsonProperty(JSON_PROPERTY_SUBMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmissions(List<SubmissionForNewEvents> submissions) {
    this.submissions = submissions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallbackNewEvents callbackNewEvents = (CallbackNewEvents) o;
    return Objects.equals(this.type, callbackNewEvents.type) &&
        Objects.equals(this.submissionIds, callbackNewEvents.submissionIds) &&
        Objects.equals(this.submissions, callbackNewEvents.submissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, submissionIds, submissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallbackNewEvents {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    submissionIds: ").append(toIndentedString(submissionIds)).append("\n");
    sb.append("    submissions: ").append(toIndentedString(submissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

