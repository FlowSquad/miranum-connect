/*
 * Submission API für Antragsverfahren und Berichtspflichten
 * Die FIT-Connect Submission API ermöglicht das Einreichen von Anträgen und Berichten aus vorgelagerten Systemen (z. B. Onlineantragsdiensten, Fachportalen oder Berichtssystemen) an die Systeme der Verwaltung zur elektronischen Verfahrensbearbeitung (z. B. Fachverfahren, Dokumentenmanagementsysteme oder Prozessplattformen). 
 *
 * The version of the OpenAPI document: 1.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.miragon.miraum.fitconnect.integration.gen.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Referenz auf ein Schema, das die Struktur der Fachdaten einer Einreichung beschreibt.
 */
@ApiModel(description = "Referenz auf ein Schema, das die Struktur der Fachdaten einer Einreichung beschreibt.")
@JsonPropertyOrder({
  SubmissionSchema.JSON_PROPERTY_MIME_TYPE,
  SubmissionSchema.JSON_PROPERTY_SCHEMA_URI
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubmissionSchema {
  /**
   * Mimetype (z.B. application/json oder application/xml) des referenzierten Schemas (z.B. XSD- oder JSON-Schema).
   */
  public enum MimeTypeEnum {
    JSON("application/json"),
    
    XML("application/xml");

    private String value;

    MimeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MimeTypeEnum fromValue(String value) {
      for (MimeTypeEnum b : MimeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private MimeTypeEnum mimeType;

  public static final String JSON_PROPERTY_SCHEMA_URI = "schemaUri";
  private URI schemaUri;

  public SubmissionSchema() {
  }

  public SubmissionSchema mimeType(MimeTypeEnum mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Mimetype (z.B. application/json oder application/xml) des referenzierten Schemas (z.B. XSD- oder JSON-Schema).
   * @return mimeType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Mimetype (z.B. application/json oder application/xml) des referenzierten Schemas (z.B. XSD- oder JSON-Schema).")
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MimeTypeEnum getMimeType() {
    return mimeType;
  }


  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMimeType(MimeTypeEnum mimeType) {
    this.mimeType = mimeType;
  }


  public SubmissionSchema schemaUri(URI schemaUri) {
    
    this.schemaUri = schemaUri;
    return this;
  }

   /**
   * URI des Fachschemas. Wird hier eine URL verwendet, sollte das Schema unter der angegebenen URL abrufbar sein. Eine Verfügbarkeit des Schemas unter der angegebenen URL darf jedoch nicht vorausgesetzt werden.
   * @return schemaUri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "URI des Fachschemas. Wird hier eine URL verwendet, sollte das Schema unter der angegebenen URL abrufbar sein. Eine Verfügbarkeit des Schemas unter der angegebenen URL darf jedoch nicht vorausgesetzt werden.")
  @JsonProperty(JSON_PROPERTY_SCHEMA_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getSchemaUri() {
    return schemaUri;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchemaUri(URI schemaUri) {
    this.schemaUri = schemaUri;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubmissionSchema submissionSchema = (SubmissionSchema) o;
    return Objects.equals(this.mimeType, submissionSchema.mimeType) &&
        Objects.equals(this.schemaUri, submissionSchema.schemaUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mimeType, schemaUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubmissionSchema {\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    schemaUri: ").append(toIndentedString(schemaUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

