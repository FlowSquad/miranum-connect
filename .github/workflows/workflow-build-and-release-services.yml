name: Release services

on:
  workflow_call:
    inputs:
      docker-release-version:
        description: 'Services release version'
        type: string
        required: false
      snapshot-release:
        description: 'Snapshot release?'
        type: boolean
        required: true
        default: false
      maven-release:
        description: 'Release maven'
        type: boolean
        required: true
        default: true
      docker-release:
        description: 'Release docker images'
        type: boolean
        required: true
        default: true
      release-connect:
        description: 'Release miranum connect'
        type: boolean
        required: true
        default: false
      release-platform:
        description: 'Release miranum platform'
        type: boolean
        required: true
        default: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: PREP / Check out Git repository
        uses: actions/checkout@v4
      - name: PREP / Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: BUILD / Build with Maven
        run: |
          chmod +x ./mvnw
          ./mvnw --batch-mode clean install

      - name: COVERAGE / Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          files: ./connect/coverage/target/coverage/jacoco.xml,./platform/coverage/target/coverage/jacoco.xml
          flags: unittests
          name: miranum
          verbose: true

  release-connect:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: inputs.release-connect == true
    steps:
      - name: PREP / Check out Git repository
        uses: actions/checkout@v4
      - name: PREP / Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          server-id: "ossrh"
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.PGP_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: RELEASE / Remove SNAPSHOT
        if: inputs.snapshot-release == false
        run: |
          chmod +x ./mvnw
          ./mvnw -f connect versions:set --batch-mode -DremoveSnapshot -DprocessAllModules

      - name: RELEASE / Build and Release Maven
        if: inputs.maven-release == true
        run: |
          ./mvnw -f connect --batch-mode --no-transfer-progress deploy --activate-profiles deploy -DskipTests
        env:
          MAVEN_USERNAME: ${{ secrets.nexus_username }}
          MAVEN_PASSWORD: ${{ secrets.nexus_password }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PGP_PRIVATE_KEY_SECRET }}


  release-platform:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: inputs.release-platform == true
    steps:
      - name: PREP / Check out Git repository
        uses: actions/checkout@v4
      - name: PREP / Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          server-id: "ossrh"
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.PGP_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: PREP / Set up QEMU
        if: inputs.docker-release == true
        uses: docker/setup-qemu-action@v3
      - name: PREP / Set up Docker Buildx
        if: inputs.docker-release == true
        uses: docker/setup-buildx-action@v3
      - name: PREP / Login to DockerHub
        if: inputs.docker-release == true
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_MIRAGON_USERNAME }}
          password: ${{ secrets.DOCKER_MIRAGON_PASSWORD }}

      - name: RELEASE / Remove SNAPSHOT
        if: inputs.snapshot-release == false
        run: |
          chmod +x ./mvnw
          ./mvnw -f platform versions:set --batch-mode -DremoveSnapshot -DprocessAllModules

      - name: RELEASE / Build and Release Maven
        if: inputs.maven-release == true
        run: |
          ./mvnw -f platform --batch-mode --no-transfer-progress deploy --activate-profiles deploy -DskipTests
        env:
          MAVEN_USERNAME: ${{ secrets.nexus_username }}
          MAVEN_PASSWORD: ${{ secrets.nexus_password }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PGP_PRIVATE_KEY_SECRET }}

      # deployment examples
      - name: DOCKER / BUILD & PUBLISH / miragon/miranum-deployment-embedded-example
        if: inputs.docker-release == true
        uses: docker/build-push-action@v5
        with:
          context: ./platform/deployment/examples/embedded-example/.
          push: true
          tags: miragon/miranum-deployment-embedded-example:${{ inputs.docker-release-version }}
          platforms: linux/amd64, linux/arm64/v8
      - name: DOCKER / BUILD & PUBLISH / miragon/miranum-deployment-rest-example
        if: inputs.docker-release == true
        uses: docker/build-push-action@v5
        with:
          context: ./platform/deployment/examples/rest-example/.
          push: true
          tags: miragon/miranum-deployment-rest-example:${{ inputs.docker-release-version }}
          platforms: linux/amd64, linux/arm64/v8

      # miranum-examples
      - name: DOCKER / BUILD & PUBLISH / miragon/miranum-single-deployment-unit-example
        if: inputs.docker-release == true
        uses: docker/build-push-action@v5
        with:
          context: ./platform/examples/single-deployment-unit-example/.
          push: true
          tags: miragon/miranum-single-deployment-unit-example:${{ inputs.docker-release-version }}
          platforms: linux/amd64, linux/arm64/v8
